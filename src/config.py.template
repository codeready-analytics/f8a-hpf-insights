"""The config file."""

import os

# Cloud constants
AWS_S3_ENDPOINT_URL = os.environ.get("AWS_S3_ENDPOINT_URL", "")
AWS_S3_ACCESS_KEY_ID = os.environ.get("AWS_S3_ACCESS_KEY_ID", "")
AWS_S3_SECRET_ACCESS_KEY = os.environ.get("AWS_S3_SECRET_ACCESS_KEY", "")
AWS_S3_BUCKET_NAME = os.environ.get("AWS_S3_BUCKET_NAME", "hpf-insights")

# Flask endpoint constants
SERVICE_PORT = "6006"
SERVICE_TIMEOUT = "900"
USE_CLOUD_SERVICES = os.environ.get("USE_CLOUD_SERVICES", "False")
HPF_SCORING_REGION = os.environ.get("HPF_SCORING_REGION", "maven")

# Training constants
HPF_input_raw_data = "training/manifest.json"

# Scoring constants

MAX_COMPANION_REC_COUNT = int(os.environ.get("MAX_COMPANION_REC_COUNT", "5"))
UNKNOWN_PACKAGES_THRESHOLD = float(os.environ.get("UNKNOWN_PACKAGES_THRESHOLD", "0.3"))

# Model filepaths
HPF_output_package_id_dict = "scoring/package_id_dict.json"
HPF_output_manifest_id_dict = "scoring/manifest_id_dict.json"
HPF_output_user_matrix = "scoring/user_matrix.npz"
HPF_output_item_matrix = "scoring/item_matrix.npz"
HPF_output_feedback_matrix = "scoring/feedback_matrix.npz"
HPF_output_feedback_id_dict = "scoring/feedback_id_dict.json"

# Other objects, required for fold-in
HPF_LAM_SHP_PATH = "scoring/lambda_shape.npz"
HPF_LAM_RTE_PATH = "scoring/lambda_rate.npz"

# Model HyperParameters
a = 0.3
a_c = 0.3
c = 0.3
c_c = 0.3
K = 30
b_c = 1
d_c = 1
iterations = 50
iter_score = 10
stop_thr = 1e-6

# Feedback constants
feedback_threshold = 0.5
USE_FEEDBACK = os.environ.get("USE_FEEDBACK", "False")

#Swagger path
SWAGGER_YAML_PATH = 'swagger/swagger.yaml'